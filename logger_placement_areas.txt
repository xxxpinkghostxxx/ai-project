# Logger Placement Areas in AI Project Codebase

This file lists all possible areas in the codebase where a logger could be present to track runtime, errors, and system state.

---

## 1. Entry Points & Initialization
- Application start (e.g., __main__ blocks in ui_engine.py, main_graph.py, dynamic_nodes.py)
- System and UI initialization (run_ui, create_main_window, initialize_main_graph)
- Resource allocation and cleanup

## 2. Main Loops & Simulation
- Main simulation loop (main_loop.py: run_main_loop)
- UI event/render loops (ui_engine.py: simulation_loop, live_update_callback)
- Periodic update functions (Tkinter or DPG window.after callbacks)
- Frame/tick counters and timing

## 3. UI Updates & User Actions
- UI control callbacks (start/stop simulation, config changes)
- UI redraws and visualization updates (update_sensory_visualization, update_workspace_canvas)
- Metrics and performance panel updates
- Log window and performance window updates

## 4. Error Handling & Exceptions
- All try/except blocks (ErrorHandler.show_error, safe_operation, etc.)
- Exception handling in periodic updates, startup, shutdown, and UI callbacks
- Logging warnings, errors, and critical failures

## 5. Configuration & State Changes
- Config file loads, saves, and updates (config_manager.py, config_panel.py)
- State changes in StateManager (toggle_sensory, toggle_suspend, update_metrics)
- System restarts and shutdowns

## 6. Simulation Steps & Graph Operations
- Node and connection creation, deletion, and updates (dynamic_nodes.py, connection_logic.py, death_and_birth_logic.py)
- Energy propagation and coupling (energy_behavior.py)
- Birth/death events and thresholds
- Edge/connection changes

## 7. Performance & Profiling
- Timing and profiling sections (profile_section.py, perf_stats in ui_engine.py)
- FPS, update intervals, and performance reports

## 8. External/Background Threads
- Threaded operations (screen capture, simulation background threads)
- Thread start/stop, exceptions, and synchronization events

---

# Summary
A logger can be placed at all major control points, error handlers, state changes, and performance-critical sections to track runtime behavior, errors, and system health. This includes both the simulation backend and the UI/frontend components. 